{"version":3,"sources":["Components/Logo/brain.png","Components/Navigation.js","Components/Logo/Logo.js","Components/ImageLinkForm/ImageLinkForm.js","Components/Rank/Rank.js","Components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","Logo","options","max","height","width","src","brain","alt","ImageLinkForm","onInputChange","onButtonSubmit","type","placeholder","onChange","onClick","border","background","color","Rank","FaceRecognition","imageURL","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","event","setState","input","target","state","models","predict","COLOR_MODEL","then","response","console","log","err","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,4OCY5BC,EAVI,WACf,OACI,yBAAKC,MACD,CAACC,QAAS,OAAQC,eAAe,aAEjC,uBAAGC,UAAY,2CAAf,c,2DCYGC,EAdF,WACT,OACI,yBAAKD,UAAU,WACX,kBAAC,IAAD,CACIA,UAAU,oBACVE,QAAS,CAAEC,IAAK,IAChBN,MAAO,CAAEO,OAAQ,IAAKC,MAAO,MAE7B,yBAAKL,UAAU,cAAa,yBAAKM,IAAKC,IAAOC,IAAI,aCMlDC,EAjBO,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eACpC,OACI,6BACI,uBAAGX,UAAU,MACZ,uEAED,6BACI,2BAAOA,UAAU,MAAMY,KAAK,OAAOC,YAAY,MAAMC,SAAUJ,IAC/D,4BACAV,UAAU,mBACVe,QAAWJ,EACXd,MAAO,CAACmB,OAAQ,OAAQC,WAAY,UAAWC,MAAO,SAHtD,aCKDC,EAbF,WACT,OACI,6BACI,yBAAKnB,UAAU,YACV,mCAEL,yBAAKA,UAAU,YACV,Q,iBCEFoB,G,MARS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,6BACI,yBAAKrB,UAAU,aAAaM,IAAKe,EAAUb,IAAI,QCKrDc,G,MAAM,IAAIC,IAASC,IAAI,CACzBC,OAAQ,sCAGNC,EAAmB,CACrBC,UAAW,CACPC,OAAQ,CACJC,MAAO,IACPC,QAAS,CACLC,QAAQ,MAuDTP,E,kDAhDX,aAAe,IAAD,8BACV,gBAOJd,cAAgB,SAAAsB,GACZ,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAON,SATzB,EAYdlB,eAAiB,WACd,EAAKsB,SAAS,CACVZ,SAAU,EAAKe,MAAMF,QAExBZ,EAAIe,OACCC,QACGf,IAASgB,YACT,EAAKH,MAAMF,OAEdM,MACG,SAASC,GACLC,QAAQC,IAAIF,MAEhB,SAASG,QAvBjB,EAAKR,MAAQ,CACTF,MAAO,GACPb,SAAU,IAJJ,E,qDAgCV,OACI,yBAAKrB,UAAU,OACX,kBAAC,IAAD,CAAWA,UAAU,YAAY6C,OAAQnB,IACzC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIhB,cAAeoC,KAAKpC,cACpBC,eAAgBmC,KAAKnC,iBAEzB,kBAAC,EAAD,CAAiBU,SAAWyB,KAAKV,MAAMf,gB,GA3CrC0B,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.85409075.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.584371a1.png\";","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={\r\n            {display: 'flex', justifyContent:'flex-end'}\r\n            }>\r\n            <p className = 'f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport './Logo.css';\r\nimport brain from './brain.png';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt\r\n                className=\"Tilt br2 shadow-2\"\r\n                options={{ max: 60 }}\r\n                style={{ height: 150, width: 180 }}\r\n            >\r\n                <div className=\"Tilt-inner\"><img src={brain} alt='logo'/></div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n            {'This Magic Brain will detect faces in your pictures. Give it a try!'}\r\n            </p>\r\n            <div>\r\n                <input className='pa2' type=\"text\" placeholder='URL' onChange={onInputChange}/>\r\n                <button \r\n                className='pa2 grow pointer'\r\n                onClick ={ onButtonSubmit }\r\n                style={{border: 'none', background: '#fc65f4', color: '#fff' }}>Detect</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\n\r\nconst Rank = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"f3 white\">\r\n                {\"Javano, your current rank is...\"}\r\n                </div>\r\n            <div className=\"f1 white\">\r\n                {\"#1\"}\r\n                </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rank;\r\n","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ( {imageURL} ) => {\r\n    return (\r\n        <div>\r\n            <img className='predictImg' src={imageURL} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FaceRecognition;","import React, { Component } from \"react\";\nimport Navigation from \"./Components/Navigation\";\nimport Clarifai from 'clarifai';\nimport Logo from \"./Components/Logo/Logo\";\nimport ImageLinkForm from \"./Components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./Components/Rank/Rank\";\nimport Particles from \"react-particles-js\";\nimport FaceRecognition from \"./Components/FaceRecognition/FaceRecognition\";\n\nimport \"./App.css\";\n\nconst app = new Clarifai.App({\n    apiKey: '510a96a14ebc4bb8b9d09911ed92c016'\n   });\n\nconst particlesOptions = {\n    particles: {\n        number: {\n            value: 200,\n            density: {\n                enable: true\n            }\n        }\n    }\n};\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: \"\",\n            imageURL: \"\"\n        };\n    }\n\n    onInputChange = event => {\n        this.setState({input: event.target.value});\n    };\n\n    onButtonSubmit = () => {\n       this.setState({\n           imageURL: this.state.input\n       })\n        app.models\n            .predict(\n                Clarifai.COLOR_MODEL,\n                this.state.input\n            )\n            .then(\n                function(response) {\n                    console.log(response)\n                },\n                function(err) {\n                    // there was an error\n                }\n            );\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Particles className=\"particles\" params={particlesOptions} />\n                <Navigation />\n                <Logo />\n                <Rank />\n                <ImageLinkForm\n                    onInputChange={this.onInputChange}\n                    onButtonSubmit={this.onButtonSubmit}\n                />\n                <FaceRecognition imageURL ={this.state.imageURL} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}